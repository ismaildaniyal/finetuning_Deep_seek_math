# -*- coding: utf-8 -*-
"""finetune.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d3uMl8mUYiXJZOnLN-ddA39czHcUF-eW
"""

import streamlit as st
import deepseek

# Title and Sections
st.title("Generative AI - Math Challenges")

# Select Task
task = st.sidebar.selectbox("Select a Task", ["Math Riddle Factory", "Math Meme Repair", "Creative Math Solver"])

# Math Riddle Factory
if task == "Math Riddle Factory":
    st.header("Math Riddle Factory")

    # Collect Riddles
    st.subheader("Enter 30 Math Riddles and Solutions")
    riddle_data = []
    for i in range(30):
        riddle = st.text_input(f"Riddle {i + 1}", key=f"riddle_{i}")
        solution = st.text_input(f"Solution {i + 1}", key=f"solution_{i}")
        if riddle and solution:
            riddle_data.append((riddle, solution))

    if st.button("Fine-Tune Model"):
        if len(riddle_data) == 30:
            fine_tune_output = deepseek.fine_tune("riddle_model", riddle_data, epochs=3)
            st.success("Model fine-tuned successfully!")

    if st.button("Generate Riddles"):
        for _ in range(5):
            generated_riddle = deepseek.generate("Generate a fun math riddle:")
            st.write(generated_riddle)

# Math Meme Repair
elif task == "Math Meme Repair":
    st.header("Math Meme Repair")

    # Collect Incorrect Memes
    st.subheader("Enter 20 Incorrect Math Memes")
    meme_data = []
    for i in range(20):
        wrong_meme = st.text_input(f"Incorrect Meme {i + 1}", key=f"wrong_meme_{i}")
        correct_explanation = st.text_input(f"Correct Explanation {i + 1}", key=f"correct_explanation_{i}")
        if wrong_meme and correct_explanation:
            meme_data.append((wrong_meme, correct_explanation))

    if st.button("Fine-Tune Meme Model"):
        if len(meme_data) == 20:
            fine_tune_output = deepseek.fine_tune("meme_model", meme_data, epochs=3)
            st.success("Model fine-tuned successfully!")

    meme_input = st.text_area("Enter an incorrect math meme to fix:")
    if st.button("Fix Meme"):
        if meme_input:
            corrected = deepseek.fix_math(meme_input)
            st.success("Fixed Meme:")
            st.write(corrected)

# Creative Math Problem Solver
elif task == "Creative Math Solver":
    st.header("Creative Math Problem Solver")

    # Collect Emoji Problems
    st.subheader("Enter 30 Emoji Math Problems and Solutions")
    emoji_data = []
    for i in range(30):
        emoji_problem = st.text_input(f"Emoji Problem {i + 1}", key=f"emoji_problem_{i}")
        emoji_solution = st.text_input(f"Emoji Solution {i + 1}", key=f"emoji_solution_{i}")
        if emoji_problem and emoji_solution:
            emoji_data.append((emoji_problem, emoji_solution))

    if st.button("Fine-Tune Emoji Model"):
        if len(emoji_data) == 30:
            fine_tune_output = deepseek.fine_tune("emoji_model", emoji_data, epochs=3)
            st.success("Model fine-tuned successfully!")

    emoji_input = st.text_area("Enter an emoji math problem to solve:")
    if st.button("Solve Emoji Math"):
        if emoji_input:
            solution = deepseek.emoji_solver(emoji_input)
            st.success("Solution:")
            st.write(solution)

st.sidebar.info("Submit in .ipynb or .py format by March 14, 2025")